// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

//// Client and Database
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

//// Source Related Data
// A source "document" or "text" that is being analysed
model Source {
  id              Int       @id @default(autoincrement())
  name            String?
  flowScaned      Boolean?
  flowEntered     Boolean?
  fileName        String?
  reference       String?
  publicationType String?
  documentType    String?
  date            DateTime?
  location        String?
  sourceLangName  String?
  langName        String?
  notes           String?

  entries Entry[]
  // collectors  Person[] @relation("Collectors")
  // consultants Person[] @relation("Consultants")
}

//// A person who is related to a source
// Not yet implemented
// model Person {
//   id   Int    @id @default(autoincrement())
//   name String

//   collected Source[] @relation("Collectors")
//   consulted Source[] @relation("Consultants")
// }

// An entry of data that resides within a source
model Entry {
  id         Int        @id @default(autoincrement())
  sourceId   Int?
  english    String?
  language   String?
  sonetic    String?
  type       EntryType?
  // categoryId Int?
  semanticId Int?
  notes      String?

  // category   Category? @relation(fields: [categoryId], references: [id])
  source   Source?     @relation(fields: [sourceId], references: [id])
  variants Reference[]
}

enum EntryType {
  ITEM
  SENT
  SUFF
  MISC
}

//// Currently Unused
// model Lexicon {
//   id         Int       @id @default(autoincrement())
//   category   Category? @relation(fields: [categoryId], references: [id])
//   categoryId Int?
//   english    String?
//   grammar    String?
// }

//// Currently Unused
// model Category {
//   id      Int       @id @default(autoincrement())
//   letter  String?
//   lexicon Lexicon[]
//   data    Entry[]
// }

//// Lexicon
// A word that will be in the lexicon
model Word {
  id            Int        @id @default(autoincrement())
  spelling      String     @unique
  morphType     MorphType?
  pronunciation String?

  dialectLabels DialectLabel[]
  references    Reference[]
  senses        Sense[]
}

enum MorphType {
  BOUNDROOT
  BOUNDSTEM
  CLITIC
  DISCONTIGUOUSPHRASE
  ENCLITIC
  PARTICLE
  PHRASE
  PROCLITIC
  ROOT
  STEM
}

enum DialectLabel {
  ONE
  TWO
  THREE
}

// A reference to a word in a source entry
model Reference {
  id       Int    @id @default(autoincrement())
  spelling String
  wordId   Int
  entryId  Int

  entry Entry @relation(fields: [entryId], references: [id], onDelete: Cascade)
  word  Word  @relation(fields: [wordId], references: [id], onDelete: Cascade)
}

// A sense of a word
model Sense {
  id              Int              @id @default(autoincrement())
  gloss           String
  wordId          Int
  reversalEntries String?
  definition      String?
  grammaticalInfo GrammaticalInfo?

  word Word @relation(fields: [wordId], references: [id], onDelete: Cascade)
}

enum GrammaticalInfo {
  ADVERB
  COORDINATINGCONNECTIVE
  NOUN
  PROFORM
  PRONOUN
  VERB
}
