// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model Source {
  id              Int           @id @default(autoincrement())
  name            String?
  flowScaned      Boolean?
  flowEntered     Boolean?
  fileName        String?
  reference       String?
  publicationType String?
  documentType    String?
  collectors      Individuals[] @relation("Collectors")
  consultants     Individuals[] @relation("Consultants")
  date            DateTime?
  location        String?
  sourceLangName  String?
  langName        String?
  notes           String?
  data            Data[]
  // senseReference  Sense[]       @relation("Reference")
  // senseSource     Sense[]       @relation("Source")
}

model Individuals {
  id        Int      @id @default(autoincrement())
  name      String
  collected Source[] @relation("Collectors")
  consulted Source[] @relation("Consultants")
}

model Lexicon {
  id         Int       @id @default(autoincrement())
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
  english    String?
  grammar    String?
}

model Category {
  id      Int       @id @default(autoincrement())
  letter  String?
  lexicon Lexicon[]
  data    Data[]
}

enum Type {
  ITEM
  SENT
  SUFF
  MISC
}

model Data {
  id         Int       @id @default(autoincrement())
  source     Source?   @relation(fields: [sourceId], references: [id])
  sourceId   Int?
  english    String?
  language   String?
  sonetic    String?
  type       Type?
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
  semanticId Int?
  notes      String?

  variants Reference[]
}

//////////////////// LEXICON
enum MorphType {
  BOUNDROOT
  BOUNDSTEM
  CLITIC
  DISCONTIGUOUSPHRASE
  ENCLITIC
  PARTICLE
  PHRASE
  PROCLITIC
  ROOT
  STEM
}

// enum DialectLabel {
//   LABELONE
//   LABELTWO
//   LABELTHREE
// }

model Word {
  id        Int        @id @default(autoincrement())
  spelling  String     @unique
  morphType MorphType?

  references Reference[]
}

model Reference {
  id       Int    @id @default(autoincrement())
  spelling String
  wordId   Int
  entryId  Int

  entry Data @relation(fields: [entryId], references: [id])
  word  Word @relation(fields: [wordId], references: [id])
}

// enum GrammaticalInfo {
//   INFOONE
//   INFOTWO
//   INFOTHREE
// }

// enum SemanticDomain {
//   DOMAINONE
//   DOMAINTWO
//   DOMAINTHREE
// }

// enum Status {
//   STATUSONE
//   STATUSTWO
//   STATUSTHREE
// }

// model Sense {
//   id              Int              @id @default(autoincrement())
//   gloss           String?
//   reversal        String?
//   definition      String?
//   grammaticalInfo GrammaticalInfo?
//   example         String?
//   translation     String?

//   reference   Source? @relation("Reference", fields: [referenceId], references: [id])
//   referenceId Int?

//   scientific   String?
//   bibliography String?
//   general      String?

//   source   Source? @relation("Source", fields: [sourceId], references: [id])
//   sourceId Int?

//   semanticDomains SemanticDomain?
//   status          Status?
// }
