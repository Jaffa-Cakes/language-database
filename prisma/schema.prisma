// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:password@localhost:5432/lang_app"
}

// IGNORE START
//id refers to source id.
//table_sources is to refer to source id in sources table.
//table_sources is to refer to source id in BWTable table.
// IGNORE END

model Language {

  s_id                Sources @relation(fields: [id], references: [source_id])
  id                  String  @id
  //table_sources       Sources[]
  table_BWSources     BWSources[]
  original_text       String?
  translation         String?
  fuzzy               String?
  sonetics            String?
  entry_type          String?
}


// IGNORE START
//source_id is referred to in the language table through s_id being the reference medium.
//this reference shows that source_id is the primary key here, but a foreign key in language table.
// IGNORE END



model Sources {

  words Language[]
  source_id              String   @id
  //s_id                   Language? @relation(fields: [source_id], references: [id])
  name                   String?
  english_scans          String?
  database_entry         String?
  file_name              String?
  origin                 String?
  publication_status     String?
  document_type          String?
  collector              String?
  consultants            String?
  date_collected         String?
  location_collected     String?
  language_name          String?
  regularized_name       String?
  notes                  String?
}


// IGNORE START
//source_id is referred to in the language table through s_id being the reference medium.
//this reference shows that source_id is the primary key here, but a foreign key in language table.
// IGNORE END


model BWSources {
source_id       String @id
s_id            Language? @relation(fields: [source_id], references: [id])
translation     String?
original        String?
}

//need a field which will hold the @id attribute.

model lexicon {
  glossary_count   Int @id
  category         String?
  number           Int?
  gloss            String?
  hg_glossary_form String?
  semantic_field   String?
  speech_part      String?
  other_note       String?
  change_note      String?
  notes            String?
  scientific_name  String?
  kin_designation  String?
  sw_rec_id        String?
  hg_basic         String?
}

//for some reason, this table is related to the languages table.
//will discuss with andrew how they are related and make the connection following on to it.

model FilteredResults {
  source               String?
  unique_id            String @id @unique
  entry_id             String?
  glossary_translation String?
  original             String?
}

// Search history table. Every searched element is added to this table. EntryCount includes number of entries and is automatically incremented.
model SearchHistory {
  entry_count   Int @id @default(autoincrement())
  searched_word String
}
