// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model Source {
  id              Int           @id @default(autoincrement())
  name            String?
  flowScaned      Boolean?
  flowEntered     Boolean?
  fileName        String?
  reference       String?
  publicationType String?
  documentType    String?
  collectors      Individuals[] @relation("Collectors")
  consultants     Individuals[] @relation("Consultants")
  date            DateTime?
  location        String?
  sourceLangName  String?
  langName        String?
  notes           String?
  data            Data[]
  senseReference  Sense[]       @relation("Reference")
  senseSource     Sense[]       @relation("Source")
}

model Individuals {
  id        Int      @id @default(autoincrement())
  name      String
  collected Source[] @relation("Collectors")
  consulted Source[] @relation("Consultants")
}

model Lexicon {
  id         Int       @id @default(autoincrement())
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
  english    String?
  grammar    String?
}

model Category {
  id      Int       @id @default(autoincrement())
  letter  String?
  lexicon Lexicon[]
  data    Data[]
}

enum Type {
  ITEM
  SENT
  SUFF
  MISC
}

model Data {
  id         Int       @id @default(autoincrement())
  source     Source?   @relation(fields: [sourceId], references: [id])
  sourceId   Int?
  english    String?
  language   String?
  sonetic    String?
  type       Type?
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
  semanticId Int?
  notes      String?
}

//////////////////// LEXICON
enum MorphType {
  TYPEONE
  TYPETWO
  TYPETHREE
}

enum DialectLabel {
  LABELONE
  LABELTWO
  LABELTHREE
}

model Word {
  id             Int            @id @default(autoincrement())
  lexemeForm     String?        @unique
  morphType      MorphType?
  dialectLabels  DialectLabel[]
  pronounciation String?
  wordId         Int?

  variantParent Variant[] @relation("ParentWord")
  variantChild  Variant[] @relation("ChildWord")
}

model Variant {
  id           Int  @id @default(autoincrement())
  parentWord   Word @relation("ParentWord", fields: [parentWordId], references: [id])
  parentWordId Int
  childWord    Word @relation("ChildWord", fields: [childWordId], references: [id])
  childWordId  Int

  dialectLabels String?
  variantType   String?
  note          String?
}

enum GrammaticalInfo {
  INFOONE
  INFOTWO
  INFOTHREE
}

enum SemanticDomain {
  DOMAINONE
  DOMAINTWO
  DOMAINTHREE
}

enum Status {
  STATUSONE
  STATUSTWO
  STATUSTHREE
}

model Sense {
  id              Int              @id @default(autoincrement())
  gloss           String?
  reversal        String?
  definition      String?
  grammaticalInfo GrammaticalInfo?
  example         String?
  translation     String?

  reference   Source? @relation("Reference", fields: [referenceId], references: [id])
  referenceId Int?

  scientific   String?
  bibliography String?
  general      String?

  source   Source? @relation("Source", fields: [sourceId], references: [id])
  sourceId Int?

  semanticDomains SemanticDomain?
  status          Status?
}
